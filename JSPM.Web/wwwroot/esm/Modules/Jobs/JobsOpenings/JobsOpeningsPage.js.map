{
  "version": 3,
  "sources": ["../../../../../Modules/Jobs/JobsOpenings/JobsOpeningsPage.ts", "../../../../../Modules/Jobs/JobsOpenings/JobsOpeningsGrid.ts", "../../../../../Modules/ServerTypes/Jobs/JobsOpeningsColumns.ts", "../../../../../Modules/ServerTypes/Jobs/JobsOpeningsForm.ts", "../../../../../Modules/ServerTypes/Jobs/JobsOpeningsRow.ts", "../../../../../Modules/ServerTypes/Jobs/JobsOpeningsService.ts", "../../../../../Modules/Jobs/JobsOpenings/JobsOpeningsDialog.ts", "../../../../../Modules/Jobs/JobsOpenings/JobsOpeningsExcelImportDialog.ts", "../../../../../Modules/ServerTypes/JobsOpenings/JobsOpeningsExcelImportForm.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { JobsOpeningsGrid } from './JobsOpeningsGrid';\r\n\r\nexport default function pageInit() {\r\n    initFullHeightGridPage(new JobsOpeningsGrid($('#GridDiv')).element);\r\n}", "import { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { JobsOpeningsColumns, JobsOpeningsRow, JobsOpeningsService } from '../../ServerTypes/Jobs';\r\nimport { JobsOpeningsDialog } from './JobsOpeningsDialog';\r\nimport { JobsOpeningsExcelImportDialog } from './JobsOpeningsExcelImportDialog';\r\n\r\n@Decorators.registerClass('JSPM.Jobs.JobsOpeningsGrid')\r\nexport class JobsOpeningsGrid extends EntityGrid<JobsOpeningsRow, any> {\r\n    protected getColumnsKey() { return JobsOpeningsColumns.columnsKey; }\r\n    protected getDialogType() { return JobsOpeningsDialog; }\r\n    protected getRowDefinition() { return JobsOpeningsRow; }\r\n    protected getService() { return JobsOpeningsService.baseUrl; }\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n    }\n    protected getButtons() {\r\n        var buttons = super.getButtons();\r\n        buttons.push({\r\n            title: 'Import From Excel',\r\n            cssClass: 'export-xlsx-button',\r\n            onClick: () => {\r\n                // open import dialog, let it handle rest\r\n                var dialog = new JobsOpeningsExcelImportDialog();\r\n                dialog.element.on('dialogclose', () => {\r\n                    this.refresh();\r\n                    dialog = null;\r\n                });\r\n                dialog.dialogOpen();\r\n            },\r\n            separator: true\r\n        });\r\n        return buttons;\r\n    }\r\n}", "\uFEFFexport class JobsOpeningsColumns {\r\n    static columnsKey = 'Jobs.JobsOpenings';\r\n}", "\uFEFFimport { StringEditor, IntegerEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface JobsOpeningsForm {\n    TypeOfEmployement: StringEditor;\n    Description: StringEditor;\n    Levels: StringEditor;\n    Vacancy: IntegerEditor;\n    CompanyName: StringEditor;\n    Location: StringEditor;\n    Role: StringEditor;\n    Budget: StringEditor;\n    Shift: StringEditor;\n    Skills: StringEditor;\n    SkillsId: IntegerEditor;\n}\n\nexport class JobsOpeningsForm extends PrefixedContext {\n    static formKey = 'Jobs.JobsOpenings';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!JobsOpeningsForm.init)  {\n            JobsOpeningsForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = IntegerEditor;\n\n            initFormType(JobsOpeningsForm, [\n                'TypeOfEmployement', w0,\n                'Description', w0,\n                'Levels', w0,\n                'Vacancy', w1,\n                'CompanyName', w0,\n                'Location', w0,\n                'Role', w0,\n                'Budget', w0,\n                'Shift', w0,\n                'Skills', w0,\n                'SkillsId', w1\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface JobsOpeningsRow {\n    Id?: number;\n    TypeOfEmployement?: string;\n    Description?: string;\n    Levels?: string;\n    Vacancy?: number;\n    CompanyName?: string;\n    Location?: string;\n    Role?: string;\n    Budget?: string;\n    Shift?: string;\n    Skills?: string;\n    SkillsId?: number;\n    SkillsSkillCategory?: string;\n}\n\nexport abstract class JobsOpeningsRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'TypeOfEmployement';\n    static readonly localTextPrefix = 'Jobs.JobsOpenings';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<JobsOpeningsRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { JobsOpeningsRow } from \"./JobsOpeningsRow\";\nimport { ExcelImportRequest } from \"../Extensions/ExcelImportRequest\";\nimport { ExcelImportResponse } from \"../Extensions/ExcelImportResponse\";\n\nexport namespace JobsOpeningsService {\n    export const baseUrl = 'Jobs/JobsOpenings';\n\n    export declare function Create(request: SaveRequest<JobsOpeningsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<JobsOpeningsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<JobsOpeningsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<JobsOpeningsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function ExcelImport(request: ExcelImportRequest, onSuccess?: (response: ExcelImportResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Jobs/JobsOpenings/Create\",\n        Update: \"Jobs/JobsOpenings/Update\",\n        Delete: \"Jobs/JobsOpenings/Delete\",\n        Retrieve: \"Jobs/JobsOpenings/Retrieve\",\n        List: \"Jobs/JobsOpenings/List\",\n        ExcelImport: \"Jobs/JobsOpenings/ExcelImport\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'ExcelImport'\n    ].forEach(x => {\n        (<any>JobsOpeningsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { JobsOpeningsForm, JobsOpeningsRow, JobsOpeningsService } from '../../ServerTypes/Jobs';\r\n\r\n@Decorators.registerClass('JSPM.Jobs.JobsOpeningsDialog')\r\nexport class JobsOpeningsDialog extends EntityDialog<JobsOpeningsRow, any> {\r\n    protected getFormKey() { return JobsOpeningsForm.formKey; }\r\n    protected getRowDefinition() { return JobsOpeningsRow; }\r\n    protected getService() { return JobsOpeningsService.baseUrl; }\r\n\r\n    protected form = new JobsOpeningsForm(this.idPrefix);\r\n}", "import { Decorators, EditorUtils, PropertyDialog } from '@serenity-is/corelib';\r\nimport { DialogButton, Authorization, isEmptyOrNull, notifyError, notifyInfo }\r\n    from '@serenity-is/corelib/q';\r\nimport { JobsOpeningsExcelImportForm } from\r\n    '../../ServerTypes/JobsOpenings';\r\nimport { JobsOpeningsService } from '../../ServerTypes/Jobs';\r\n@Decorators.registerClass('JSPM.JobsOpenings.ProjectExcelImportDialog')\r\nexport class JobsOpeningsExcelImportDialog extends PropertyDialog<any, any>{\r\n    protected getFormKey() { return JobsOpeningsExcelImportForm.formKey; }\r\n    protected form = new JobsOpeningsExcelImportForm(this.idPrefix);\r\n    constructor() {\r\n        super();\r\n        this.form = new JobsOpeningsExcelImportForm(this.idPrefix);\r\n    }\r\n    protected getDialogTitle(): string {\r\n        return \"Excel Import\";\r\n    }\r\n    protected getDialogButtons(): DialogButton[] {\r\n        return [\r\n            {\r\n                text: 'Import',\r\n                click: () => {\r\n                    /*debugger;*/\r\n                    if (!this.validateBeforeSave())\r\n                        return;\r\n                    if (this.form.FileName.value == null ||\r\n                        isEmptyOrNull(this.form.FileName.value.Filename)) {\r\n                        notifyError(\"Please select a file!\");\r\n                        return;\r\n                    }\r\n                    JobsOpeningsService.ExcelImport({\r\n                        FileName: this.form.FileName.value.Filename,\r\n                    }, response => {\r\n                        notifyInfo(\r\n                            'Inserted: ' + (response.Inserted || 0));\r\n                        if (response.ErrorList != null &&\r\n                            response.ErrorList.length > 0) {\r\n                            notifyError(response.ErrorList.join(',\\r\\n '));\r\n                        }\r\n                        this.dialogClose();\r\n                    });\r\n                },\r\n            },\r\n            {\r\n                text: 'Cancel',\r\n                click: () => this.dialogClose()\r\n            }\r\n        ];\r\n    }\r\n}", "\uFEFFimport { ImageUploadEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface JobsOpeningsExcelImportForm {\n    FileName: ImageUploadEditor;\n}\n\nexport class JobsOpeningsExcelImportForm extends PrefixedContext {\n    static formKey = 'JobsOpenings.JobsOpeningsExcelImport';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!JobsOpeningsExcelImportForm.init)  {\n            JobsOpeningsExcelImportForm.init = true;\n\n            var w0 = ImageUploadEditor;\n\n            initFormType(JobsOpeningsExcelImportForm, [\n                'FileName', w0\n            ]);\n        }\n    }\n}"],
  "mappings": "mFAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAAuC,SCA/B,IAAMC,EAAN,KAA0B,CAElC,EAFcC,EAAAD,EAAA,uBAAAA,EACH,WAAa,oBCDvB,IAAAE,EAA6D,SAC9DC,EAA6B,SAgBtB,IAAMC,EAAN,cAA+B,iBAAgB,CAIlD,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAiB,KAAO,CACzBA,EAAiB,KAAO,GAExB,IAAIE,EAAK,eACLC,EAAK,mBAET,gBAAaH,EAAkB,CAC3B,oBAAqBE,EACrB,cAAeA,EACf,SAAUA,EACV,UAAWC,EACX,cAAeD,EACf,WAAYA,EACZ,OAAQA,EACR,SAAUA,EACV,QAASA,EACT,SAAUA,EACV,WAAYC,CAChB,CAAC,CACL,CACJ,CACJ,EA5BaC,EAANJ,EAAMK,EAAAD,EAAA,oBAAAA,EACF,QAAU,oBClBpB,IAAAE,EAA4B,SAkBtB,IAAeC,EAAf,KAA+B,CAUtC,EAVsBC,EAAAD,EAAA,mBAAAA,EACF,WAAa,KADXA,EAEF,aAAe,oBAFbA,EAGF,gBAAkB,oBAHhBA,EAIF,iBAAmB,yBAJjBA,EAKF,iBAAmB,yBALjBA,EAMF,eAAiB,yBANfA,EAOF,iBAAmB,yBAPjBA,EASF,UAAS,eAA6B,EC3BzD,IAAAE,EAAuK,SAKvJC,OACAA,EAAA,QAAU,oBASVA,EAAA,QAAU,CACnB,OAAQ,2BACR,OAAQ,2BACR,OAAQ,2BACR,SAAU,6BACV,KAAM,yBACN,YAAa,+BACjB,EAEA,CACI,SACA,SACA,SACA,WACA,OACA,aACJ,EAAE,QAAQ,GAAK,CACLA,EAAqB,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CAC/C,SAAO,kBAAeH,EAAA,QAAU,IAAM,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA9BYH,MAAA,KCLhB,IAAAI,EAAyC,SAInC,IAAMC,EAAN,cAAiC,cAAmC,CAApE,kCAKH,KAAU,KAAO,IAAIC,EAAiB,KAAK,QAAQ,EAJzC,YAAa,CAAE,OAAOA,EAAiB,OAAS,CAChD,kBAAmB,CAAE,OAAOC,CAAiB,CAC7C,YAAa,CAAE,OAAOC,EAAoB,OAAS,CAGjE,EANaC,EAAAJ,EAAA,sBAAAA,EAANK,EAAA,CADN,aAAW,cAAc,8BAA8B,GAC3CL,GCJb,IAAAM,EAAwD,SACxDC,EACS,SCFR,IAAAC,EAAmD,SACpDC,EAA6B,SAMtB,IAAMC,EAAN,cAA0C,iBAAgB,CAI7D,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAA4B,KAAO,CACpCA,EAA4B,KAAO,GAEnC,IAAIE,EAAK,uBAET,gBAAaF,EAA6B,CACtC,WAAYE,CAChB,CAAC,CACL,CACJ,CACJ,EAjBaC,EAANH,EAAMI,EAAAD,EAAA,+BAAAA,EACF,QAAU,uCDDd,IAAME,EAAN,cAA4C,gBAAwB,CAGvE,aAAc,CACV,MAAM,EAFV,KAAU,KAAO,IAAIC,EAA4B,KAAK,QAAQ,EAG1D,KAAK,KAAO,IAAIA,EAA4B,KAAK,QAAQ,CAC7D,CALU,YAAa,CAAE,OAAOA,EAA4B,OAAS,CAM3D,gBAAyB,CAC/B,MAAO,cACX,CACU,kBAAmC,CACzC,MAAO,CACH,CACI,KAAM,SACN,MAAO,IAAM,CAET,GAAK,KAAK,mBAAmB,EAE7B,IAAI,KAAK,KAAK,SAAS,OAAS,SAC5B,iBAAc,KAAK,KAAK,SAAS,MAAM,QAAQ,EAAG,IAClD,eAAY,uBAAuB,EACnC,MACJ,CACAC,EAAoB,YAAY,CAC5B,SAAU,KAAK,KAAK,SAAS,MAAM,QACvC,EAAGC,GAAY,IACX,cACI,cAAgBA,EAAS,UAAY,EAAE,EACvCA,EAAS,WAAa,MACtBA,EAAS,UAAU,OAAS,MAC5B,eAAYA,EAAS,UAAU,KAAK;AAAA,EAAQ,CAAC,EAEjD,KAAK,YAAY,CACrB,CAAC,EACL,CACJ,EACA,CACI,KAAM,SACN,MAAO,IAAM,KAAK,YAAY,CAClC,CACJ,CACJ,CACJ,EA1CaC,EAAAJ,EAAA,iCAAAA,EAANK,EAAA,CADN,aAAW,cAAc,4CAA4C,GACzDL,GNDN,IAAMM,EAAN,cAA+B,YAAiC,CACzD,eAAgB,CAAE,OAAOC,EAAoB,UAAY,CACzD,eAAgB,CAAE,OAAOC,CAAoB,CAC7C,kBAAmB,CAAE,OAAOC,CAAiB,CAC7C,YAAa,CAAE,OAAOC,EAAoB,OAAS,CAE7D,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CACU,YAAa,CACnB,IAAIC,EAAU,MAAM,WAAW,EAC/B,OAAAA,EAAQ,KAAK,CACT,MAAO,oBACP,SAAU,qBACV,QAAS,IAAM,CAEX,IAAIC,EAAS,IAAIC,EACjBD,EAAO,QAAQ,GAAG,cAAe,IAAM,CACnC,KAAK,QAAQ,EACbA,EAAS,IACb,CAAC,EACDA,EAAO,WAAW,CACtB,EACA,UAAW,EACf,CAAC,EACMD,CACX,CACJ,EA3BaG,EAAAT,EAAA,oBAAAA,EAANU,EAAA,CADN,aAAW,cAAc,4BAA4B,GACzCV,GDHE,SAARW,GAA4B,IAC/B,0BAAuB,IAAIC,EAAiB,EAAE,UAAU,CAAC,EAAE,OAAO,CACtE,CAFwBC,EAAAF,EAAA",
  "names": ["import_q", "import_corelib", "JobsOpeningsColumns", "__name", "import_corelib", "import_q", "_JobsOpeningsForm", "prefix", "w0", "w1", "JobsOpeningsForm", "__name", "import_q", "JobsOpeningsRow", "__name", "import_q", "JobsOpeningsService", "r", "s", "o", "import_corelib", "JobsOpeningsDialog", "JobsOpeningsForm", "JobsOpeningsRow", "JobsOpeningsService", "__name", "__decorateClass", "import_corelib", "import_q", "import_corelib", "import_q", "_JobsOpeningsExcelImportForm", "prefix", "w0", "JobsOpeningsExcelImportForm", "__name", "JobsOpeningsExcelImportDialog", "JobsOpeningsExcelImportForm", "JobsOpeningsService", "response", "__name", "__decorateClass", "JobsOpeningsGrid", "JobsOpeningsColumns", "JobsOpeningsDialog", "JobsOpeningsRow", "JobsOpeningsService", "container", "buttons", "dialog", "JobsOpeningsExcelImportDialog", "__name", "__decorateClass", "pageInit", "JobsOpeningsGrid", "__name"]
}
